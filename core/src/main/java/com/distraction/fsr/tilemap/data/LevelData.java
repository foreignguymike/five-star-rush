package com.distraction.fsr.tilemap.data;

import com.distraction.fsr.tilemap.Restaurant;
import com.distraction.fsr.utils.Utils;

import java.util.Arrays;
import java.util.List;

/**
 * 0 is empty tile
 * 100 is empty table
 * 1-99 is food table
 */
public class LevelData {

    private static final int t = 100; // empty table

    public List<RestaurantData> data = Arrays.asList(
            new RestaurantData(
                    Restaurant.Type.FRUIT,
                    11, 24,
                    Utils.int2D(11, 24, new int[]{
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 1, 2, 3, 0, 4, 1, 2, 0, 2, 2, 0, 0, 1, 1, 0, 1, 3, 2, 0, 3, 4, 1, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 3, 1, 2, 0, 3, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 1, 0, 2, 1, 3, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 1, 3, 4, 0, 3, 2, 1, 0, 3, 3, 0, 0, 2, 2, 0, 2, 3, 4, 0, 1, 3, 1, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 2, 3, 4, 0, 3, 1, 2, 0, 1, 1, 0, 0, 3, 3, 0, 2, 1, 3, 0, 4, 3, 2, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 1, 2, 3, 0, 2, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 4, 0, 3, 2, 1, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0
                    }),
                    Utils.int2D(11, 24, new int[]{
                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                    })
            )
    );

}
